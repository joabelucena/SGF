/** INICIO CONFIGURACAO USUARIO **/

/*****************************/
/** Cria tabela de usuarios **/
/*****************************/
CREATE TABLE USERS (
   ID 			INT				NOT NULL
  ,USERNAME		VARCHAR(45)		NOT NULL
  ,PASSWORD		VARCHAR(100)	NOT NULL
  ,EMAIL		VARCHAR(45)
  ,STATUS		VARCHAR(45)		NOT NULL
  ,ROLEID		INT				NOT NULL
  ,PRIMARY KEY (ID)
);
COMMIT;

--Chave Unica: username
ALTER TABLE USERS 
ADD CONSTRAINT uk_USERS_UNIQUE1 UNIQUE (USERNAME);
COMMIT;


/*GENERATOR*/
CREATE GENERATOR GEN_USER_ID;
SET GENERATOR GEN_USER_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_USER_ID FOR USERS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ID IS NULL)
        then new.ID = GEN_ID(GEN_USER_ID,1);
END^
SET TERM ; ^
COMMIT;

/*****************************/



/*****************************/
/**  Cria tabela de Perfis  **/
/*****************************/
CREATE TABLE ROLE (
  ID			INTEGER		NOT NULL
  ,ROLENAME		VARCHAR(45)	NOT NULL
  ,PRIMARY KEY (ID)
);
COMMIT;

-- Chave Unica: roleName
ALTER TABLE ROLE 
ADD CONSTRAINT uk_ROLE_UNIQUE1 UNIQUE (ROLENAME);
COMMIT;

/*GENERATOR*/
CREATE GENERATOR GEN_ROLE_ID;
SET GENERATOR GEN_ROLE_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_ROLE_ID FOR ROLE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ID IS NULL)
        then new.ID = GEN_ID(GEN_ROLE_ID,1);
END^
SET TERM ; ^
COMMIT;

/*****************************/
/**   Cria tabela de Menus  **/
/*****************************/
CREATE TABLE MENU (
  ID			INT			NOT NULL
  ,TEXT			VARCHAR(45)	NOT NULL
  ,ICONCLS		VARCHAR(45)
  ,PARENT_ID	INT
  ,TYPE			VARCHAR(02)	-- Colocar como rquired para su-menus
  ,URL			VARCHAR(45)
  ,CLASSNAME	VARCHAR(45)
  ,PRIMARY KEY (ID)
);
COMMIT;

-- Chave Unica: id,parent_id
ALTER TABLE MENU 
ADD CONSTRAINT uk_MENU_UNIQUE1 UNIQUE (ID,PARENT_ID);
COMMIT;


/*GENERATOR*/
CREATE GENERATOR GEN_MENU_ID;
SET GENERATOR GEN_MENU_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_MENU_ID FOR MENU ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ID IS NULL)
        then new.ID = GEN_ID(GEN_MENU_ID,1);
END^
SET TERM ; ^
COMMIT;
/*****************************/


/************************************/
/** Cria tabela de Funcionalidades **/
/************************************/
CREATE TABLE SYS_FEATURES (
  ID			INT			NOT NULL
  ,DESCRIPTION	VARCHAR(45) NOT NULL
  ,URL			VARCHAR(45)
  ,PRIMARY KEY (ID));
COMMIT;

-- Chave Unica: id,parent_id
ALTER TABLE SYS_FEATURES 
ADD CONSTRAINT uk_SYS_FEATURES_UNIQUE1 UNIQUE (DESCRIPTION);
COMMIT;


/*GENERATOR*/
CREATE GENERATOR GEN_FTR_ID;
SET GENERATOR GEN_FTR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_FTR_ID FOR SYS_FEATURES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ID IS NULL)
        then new.ID = GEN_ID(GEN_FTR_ID,1);
END^
SET TERM ; ^
COMMIT;

/*****************************************/
/** Cria Tabelas de Relacionamentos n:m **/
/*****************************************/
-- Perfis:Bases de Manutencao
CREATE TABLE ROLE_SERVICES_STATIONS (
  ROLEID		INT NOT NULL,
  STATIONID		INT NOT NULL,
  PRIMARY KEY (ROLEID, STATIONID));
COMMIT;

-- Perfis:Menus
CREATE TABLE ROLE_MENU (
  ROLEID		INT NOT NULL,
  MENUID		INT NOT NULL,
  PRIMARY KEY (ROLEID, MENUID));
COMMIT;

-- Perfis:Funcionalidades
CREATE TABLE ROLE_FEATURES (
  ROLEID		INT NOT NULL,
  FEATUREID		INT NOT NULL,
  PRIMARY KEY (ROLEID, FEATUREID));
COMMIT;


/*POPULATE TABLE*/

-- Tabela: role
INSERT INTO ROLE (ROLENAME) VALUES ('ROOT');
INSERT INTO ROLE (ROLENAME) VALUES ('ADMINISTRADOR');
INSERT INTO ROLE (ROLENAME) VALUES ('CCO');
INSERT INTO ROLE (ROLENAME) VALUES ('BASE BARREIROS');
INSERT INTO ROLE (ROLENAME) VALUES ('BASE VALONGO');
INSERT INTO ROLE (ROLENAME) VALUES ('OPERACAO (BARREIROS)');
INSERT INTO ROLE (ROLENAME) VALUES ('OPERACAO (VALONGO)');

INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Reconhecer Eventos','/events/action/recognize');
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Normalizar Eventos','/events/action/normalize');

-- Tabela: users (Criptografia MD5)
INSERT INTO USERS (USERNAME,PASSWORD,STATUS,ROLEID) VALUES ('SYSTEM','440e22afa3f863cb77844777f9f386e6','ACTIVE',1);

-- Tabela: MENU

/********************************************************************************
 ********************************* TYPES ****************************************
 ********************************************************************************
 * PN | Panel Render (Ext Views)
 * SR | Spago Report (Spago Report for rendering in 'report.jsp' file)
 * EU | External Url (Render in a new TAB. Requires URL field) 
 * IU | Internal Url (Render inside SAM. Requires URL field)
 ********************************************************************************/ 


-- Sub-Menu: Alarmes
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Inicio',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Eventos e Alarmes'						,(SELECT ID FROM MENU WHERE TEXT = 'Inicio' AND PARENT_ID IS NULL),'eventgrid');

-- Sub-Menu: Ordem de Serviço
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Ordem de Serviço',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Ordens de Serviço'						,(SELECT ID FROM MENU WHERE TEXT = 'Ordem de Serviço' AND PARENT_ID IS NULL),'serviceordergrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Tipos de Serviços'						,(SELECT ID FROM MENU WHERE TEXT = 'Ordem de Serviço' AND PARENT_ID IS NULL),'serviceorderjobgrid');

-- Sub-Menu: Cadastros
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Cadastros',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Regras de Mud. de Est.'					,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'serviceorderrulesgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Fabricante de Equipamentos'				,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'equipmentmanufacturergrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Modelos de Equipamentos'					,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'equipmentmodelgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Tipos de Equipamentos'					,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'equipmenttypegrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Técnicos'									,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'techniciangrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Estado Operacional'						,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'operationalstategrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Alarmes'									,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'alarmgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Tipos de Alarmes'							,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'alarmtypegrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Grupos de Alarmes'						,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'alarmgroupgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Tipos de Locais'							,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'sitetypegrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Locais'									,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'sitegrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Status de OS'								,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'serviceorderstatusgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Equipamentos'								,(SELECT ID FROM MENU WHERE TEXT = 'Cadastros' AND PARENT_ID IS NULL),'equipmentsgrid');

-- Sub-Menu: Manutenção
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Manutenção',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Regras de Supervisao'						,(SELECT ID FROM MENU WHERE TEXT = 'Manutenção' AND PARENT_ID IS NULL),'taskgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Filtro de Alarmes'						,(SELECT ID FROM MENU WHERE TEXT = 'Manutenção' AND PARENT_ID IS NULL),'alarmfiltergrid');

-- Sub-Menu: Configuração
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Configuração',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Parâmetros'								,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'parametergrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Tipos de OS'								,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'serviceordertypegrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Niveis de Severidade'						,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'severitygrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Base de Manutenção'						,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'stationgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Protocolos de Equipamentos'				,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'equipmentprotocolgrid');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Sub-Sistemas'								,(SELECT ID FROM MENU WHERE TEXT = 'Configuração' AND PARENT_ID IS NULL),'systemgrid');

-- Sub-Menu: Usuários
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Usuários',NULL,'');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('PN',NULL,'Perfis de Usuário'						,(SELECT ID FROM MENU WHERE TEXT = 'Usuários' AND PARENT_ID IS NULL),'userrolegrid');

-- Sub-Menu: Relatórios
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES(NULL,NULL,'Relatórios',NULL,'');

-- Não será liberado para os usuários
--INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('EU','http://localhost:8180/SpagoBI','Analises'	,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),NULL);

INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Comandos e Alarmes'						,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__725415464');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Manut. Preventivas'						,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__647338078');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Manut. Corretivas'						,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__170415728');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Manut. Preditivas'						,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__933450806');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Manut. Pendentes'							,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__326002917');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Ocorr. Operacionais'						,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__483489033');
INSERT INTO MENU (TYPE,URL,TEXT,PARENT_ID,CLASSNAME)VALUES('SR',NULL,'Log do Sistema'							,(SELECT ID FROM MENU WHERE TEXT = 'Relatórios' AND PARENT_ID IS NULL),'ws__223028168');

-- Tabela: ROLE_MENU
INSERT INTO ROLE_MENU (MENUID, ROLEID) SELECT ID ,1 FROM MENU;

COMMIT;
/** FIM CONFIGURACAO USUARIO **/
/* Table:		EQUIPMENTS_MANUFACTURER
 * Prefix:		EMA
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_MANUFACTURER (
  EMA_ID INT NOT NULL PRIMARY KEY,
  EMA_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_EMA_INDEX1_idx ON EQUIPMENTS_MANUFACTURER(EMA_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_EMA_ID;
SET GENERATOR GEN_EMA_ID TO 0;

/*CONSTRAINTS*/
ALTER TABLE EQUIPMENTS_MANUFACTURER
ADD CONSTRAINT uk_EMA_UNIQUE1 UNIQUE (EMA_DESCRIPTION);
COMMIT;

/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMA_ID  FOR EQUIPMENTS_MANUFACTURER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EMA_ID IS NULL)
        then new.EMA_ID = GEN_ID(GEN_EMA_ID,1);
END^
SET TERM ; ^
COMMIT;



/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMA_LOG  FOR EQUIPMENTS_MANUFACTURER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_PROTOCOL
 * Prefix:		EPR
 * Date:		09/12/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_PROTOCOL (
  EPR_ID INT NOT NULL PRIMARY KEY,
  EPR_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_EPR_ID;
SET GENERATOR GEN_EPR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EPR_ID  FOR EQUIPMENTS_PROTOCOL ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EPR_ID IS NULL)
        then new.EPR_ID = GEN_ID(GEN_EPR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EPR_LOG  FOR EQUIPMENTS_PROTOCOL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_MODEL
 * Prefix:		EMO
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_MODEL (
  EMO_ID			INT			NOT NULL PRIMARY KEY,
  EMO_DESCRIPTION	VARCHAR(45)	NOT NULL,
  EMO_PROTOCOL_ID	INT,
  USR_INSERT		VARCHAR(45)	NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;
  
/*INDEXES*/
CREATE INDEX ix_EMO_INDEX1_idx ON EQUIPMENTS_MODEL(EMO_DESCRIPTION);
CREATE INDEX fk_EMO_EPR_idx ON EQUIPMENTS_MODEL(EMO_PROTOCOL_ID);

/*REFERENCES*/
ALTER TABLE EQUIPMENTS_MODEL
ADD CONSTRAINT fk_EMO_EPR_ref
    FOREIGN KEY (EMO_PROTOCOL_ID)
    REFERENCES EQUIPMENTS_PROTOCOL (EPR_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_EMO_ID;
SET GENERATOR GEN_EMO_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMO_ID  FOR EQUIPMENTS_MODEL ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EMO_ID IS NULL)
        then new.EMO_ID = GEN_ID(GEN_EMO_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EMO_LOG  FOR EQUIPMENTS_MODEL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/*
 * Variaveis:
 * OPERATIONAL_STATE:	Tabela
 * OST:	Prefixo da Tabela
 * <CAMPO_ID>:	Campo ID da Tabela
 * */

/* Table:		OPERATIONAL_STATE
 * Prefix:		OST
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE OPERATIONAL_STATE (
  OST_ID VARCHAR(20) NOT NULL,
  OST_MODEL_ID INT NOT NULL,
  OST_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP ,
  PRIMARY KEY (OST_ID, OST_MODEL_ID));
COMMIT;

/*INDEXES*/
CREATE INDEX fk_OST_EMO_idx ON OPERATIONAL_STATE(OST_MODEL_ID);

/*REFERENCES*/
ALTER TABLE OPERATIONAL_STATE
ADD CONSTRAINT fk_OST_EMO_ref
    FOREIGN KEY (OST_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID);

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_OST_LOG  FOR OPERATIONAL_STATE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_TYPE
 * Prefix:		ETY
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_TYPE (
  ETY_ID INT NOT NULL PRIMARY KEY,
  ETY_DESCRIPTION VARCHAR(45) NOT NULL,
  ETY_DAILY_HOURS INT,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP);
COMMIT;


/*INDEXES*/
CREATE INDEX ix_ETY_INDEX1_idx ON EQUIPMENTS_TYPE(ETY_DESCRIPTION);


/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_ETY_ID;
SET GENERATOR GEN_ETY_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_ETY_ID  FOR EQUIPMENTS_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ETY_ID IS NULL)
        then new.ETY_ID = GEN_ID(GEN_ETY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ETY_LOG  FOR EQUIPMENTS_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_STATION
 * Prefix:		SST
 * Date:		17/03/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_STATION (
  SST_ID			INT			PRIMARY KEY,
  SST_DESCRIPTION	VARCHAR(45),
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;
/*INDEXES*/
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_SST_ID;
SET GENERATOR GEN_SST_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SST_ID  FOR SERVICE_STATION ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SST_ID IS NULL)
        then new.SST_ID = GEN_ID(GEN_SST_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SST_LOG  FOR SERVICE_STATION ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SITES_TYPE
 * Prefix:		STY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SITES_TYPE (
  STY_ID INT NOT NULL PRIMARY KEY,
  STY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_STY_INDEX1_idx ON SITES_TYPE (STY_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_STY_ID;
SET GENERATOR GEN_STY_ID TO 0;

/*CONSTRAINTS*/
ALTER TABLE SITES_TYPE 
ADD CONSTRAINT uk_STY_UNIQUE1 UNIQUE (STY_DESCRIPTION);
COMMIT;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_STY_ID  FOR SITES_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.STY_ID IS NULL)
        then new.STY_ID = GEN_ID(GEN_STY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_STY_LOG  FOR SITES_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SITES
 * Prefix:		SIT
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	SITES(SIT_ID),SITES_TYPE(STY_ID), SERVICE_STATION(SST_ID)
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SITES (
  SIT_ID			INT			NOT NULL	PRIMARY KEY
  ,SIT_DESCRIPTION	VARCHAR(200) NOT NULL
  ,SIT_SHORTNAME	VARCHAR(15) NOT NULL
  ,SIT_STATION_ID	INT
  ,SIT_PARENT_ID	INT
  ,SIT_TYPE_ID		INT			NOT NULL
  ,USR_INSERT		VARCHAR(45)	NOT NULL
  ,DTI_INSERT		TIMESTAMP	NOT NULL
  ,USR_UPDATE		VARCHAR(45)
  ,DTI_UPDATE		TIMESTAMP);
COMMIT;


/*INDEXES*/
CREATE INDEX fk_SIT_STY_idx ON SITES(SIT_TYPE_ID);
CREATE INDEX fk_SIT_SIT_idx ON SITES(SIT_PARENT_ID);
CREATE INDEX fk_SIT_SST_idx ON SITES(SIT_STATION_ID);
CREATE INDEX ix_SIT_INDEX1_idx ON SITES(SIT_DESCRIPTION);


/*REFERENCES*/
ALTER TABLE SITES
ADD CONSTRAINT fk_SIT_SIT_ref
    FOREIGN KEY (SIT_PARENT_ID)
    REFERENCES SITES (SIT_ID),
    
ADD CONSTRAINT fk_SIT_STY_ref
    FOREIGN KEY (SIT_TYPE_ID)
    REFERENCES SITES_TYPE (STY_ID),
    
ADD CONSTRAINT fk_SIT_SST_ref
    FOREIGN KEY (SIT_STATION_ID)
    REFERENCES SERVICE_STATION (SST_ID);
    

/*GENERATOR*/
CREATE GENERATOR GEN_SIT_ID;
SET GENERATOR GEN_SIT_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SIT_ID  FOR SITES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SIT_ID IS NULL)
        then new.SIT_ID = GEN_ID(GEN_SIT_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SIT_LOG  FOR SITES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/******* END OF TABLE CONFIG *******/

/* Table:		COUNTER_TYPE
 * Prefix:		CTY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */


/*
CREATE TABLE COUNTER_TYPE (
  CTY_ID INT NOT NULL PRIMARY KEY,
  CTY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP);
COMMIT;


CREATE INDEX ix_CTY_INDEX1_idx ON COUNTER_TYPE (CTY_DESCRIPTION);


CREATE GENERATOR GEN_CTY_ID;
SET GENERATOR GEN_CTY_ID TO 0;



SET TERM ^ ;
CREATE TRIGGER TRG_CTY_ID  FOR COUNTER_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.CTY_ID IS NULL)
        then new.CTY_ID = GEN_ID(GEN_CTY_ID,1);
END^
SET TERM ; ^
COMMIT;



SET TERM ^ ;
CREATE TRIGGER TRG_CTY_LOG  FOR COUNTER_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;
*/

/******* END OF TABLE CONFIG *******/

/* Table:		SUB_SYSTEM
 * Prefix:		SSY
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE SUB_SYSTEM (
  SSY_ID VARCHAR(10) NOT NULL PRIMARY KEY,
  SSY_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP);
COMMIT;


/*INDEXES*/
CREATE INDEX ix_SSY_INDEX1_idx ON SUB_SYSTEM (SSY_DESCRIPTION);
  
  
/*REFERENCES*/

/*GENERATOR*/

/*TRIGGER ID*/


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SSY_LOG  FOR SUB_SYSTEM ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS
 * Prefix:		EQU
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS (
  EQU_ID				VARCHAR(20)	NOT NULL PRIMARY KEY
  ,EQU_DESCRIPTION		VARCHAR(100)
  ,EQU_FIXED_ASSET		VARCHAR(20)
  ,EQU_SERVICE_TAG		VARCHAR(20)
  ,EQU_IP				VARCHAR(15)
  ,EQU_PARENT_ID		VARCHAR(20)
  ,EQU_TYPE_ID			INT			NOT NULL
  ,EQU_MODEL_ID			INT			NOT NULL
  ,EQU_MANUFACTURER_ID	INT			NOT NULL
  ,EQU_SITE_ID			INT			NOT NULL
  ,EQU_SYSTEM_ID		VARCHAR(10) NOT NULL
  ,EQU_MTBF_CALC		INT			DEFAULT 0
  ,EQU_MTBF_MANF		INT			DEFAULT 0
  ,EQU_INSTALL_DATE		TIMESTAMP	NOT NULL
  ,EQU_REMARK			VARCHAR(100)
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45)
  ,DTI_UPDATE			TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_EQU_EMO_idx		ON EQUIPMENTS(EQU_MODEL_ID);
CREATE INDEX fk_EQU_ETY_idx		ON EQUIPMENTS(EQU_TYPE_ID);
CREATE INDEX fk_EQU_EMA_idx		ON EQUIPMENTS(EQU_MANUFACTURER_ID);
CREATE INDEX fk_EQU_SIT_idx		ON EQUIPMENTS(EQU_SITE_ID);
CREATE INDEX fk_EQU_SSY_idx		ON EQUIPMENTS(EQU_SYSTEM_ID);
CREATE INDEX fk_EQU_EQU_idx		ON EQUIPMENTS(EQU_PARENT_ID);
CREATE INDEX ix_EQU_INDEX1_idx	ON EQUIPMENTS(EQU_FIXED_ASSET);
CREATE INDEX ix_EQU_INDEX2_idx	ON EQUIPMENTS(EQU_SERVICE_TAG);
  
/*REFERENCES*/
ALTER TABLE EQUIPMENTS
ADD CONSTRAINT fk_EQU_EMA_ref
    FOREIGN KEY (EQU_MANUFACTURER_ID)
    REFERENCES EQUIPMENTS_MANUFACTURER (EMA_ID),
ADD CONSTRAINT fk_EQU_EMO_ref
    FOREIGN KEY (EQU_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID),
ADD CONSTRAINT fk_EQU_ETY_ref
    FOREIGN KEY (EQU_TYPE_ID)
    REFERENCES EQUIPMENTS_TYPE (ETY_ID),
ADD CONSTRAINT fk_EQU_SIT_ref
    FOREIGN KEY (EQU_SITE_ID)
    REFERENCES SITES (SIT_ID),
ADD CONSTRAINT fk_EQU_SSY_ref
    FOREIGN KEY (EQU_SYSTEM_ID)
    REFERENCES SUB_SYSTEM (SSY_ID),
ADD CONSTRAINT fk_EQU_EQU_ref
    FOREIGN KEY (EQU_PARENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);

    
/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EQU_LOG  FOR EQUIPMENTS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		DOCUMENTS_TYPE
 * Prefix:		DTY
 * Date:		17/03/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*
CREATE TABLE DOCUMENTS_TYPE (
  DTY_ID			INT			PRIMARY KEY,
  DTY_DESCRIPTION	VARCHAR(45) NOT NULL,
  DTY_EXTENSION		VARCHAR(10) NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;

CREATE GENERATOR GEN_DTY_ID;
SET GENERATOR GEN_DTY_ID TO 0;


SET TERM ^ ;
CREATE TRIGGER TRG_DTY_ID  FOR DOCUMENTS_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.DTY_ID IS NULL)
        then new.DTY_ID = GEN_ID(GEN_DTY_ID,1);
END^
SET TERM ; ^
COMMIT;


SET TERM ^ ;
CREATE TRIGGER TRG_DTY_LOG  FOR DOCUMENTS_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


INSERT INTO DOCUMENTS_TYPE(DTY_DESCRIPTION,DTY_EXTENSION,USR_INSERT)VALUES('ARQUIVOS DE VIDEO MP4'		,'mp4'	,'SYSTEM');
INSERT INTO DOCUMENTS_TYPE(DTY_DESCRIPTION,DTY_EXTENSION,USR_INSERT)VALUES('ARQUIVOS DE LEITURA PDF'	,'pdf'	,'SYSTEM');
INSERT INTO DOCUMENTS_TYPE(DTY_DESCRIPTION,DTY_EXTENSION,USR_INSERT)VALUES('ARQUIVOS DO WORD 1997-2003'	,'doc'	,'SYSTEM');
INSERT INTO DOCUMENTS_TYPE(DTY_DESCRIPTION,DTY_EXTENSION,USR_INSERT)VALUES('ARQUIVOS DO WORD 2007+'		,'docx'	,'SYSTEM');

*/
/******* END OF TABLE CONFIG *******/

/* Table:		DOCUMENTS
 * Prefix:		DOC
 * Date:		17/03/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE DOCUMENTS (
  DOC_ID			INT				NOT NULL,
  DOC_MODEL_ID		INT						,
  DOC_DESCRIPTION	VARCHAR(45) 	NOT NULL,
  DOC_URL			VARCHAR(100)	NOT NULL,
  USR_INSERT		VARCHAR(45)		NOT NULL,
  DTI_INSERT		TIMESTAMP		NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP,
  PRIMARY KEY (DOC_ID)
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_DOC_EMO_idx ON DOCUMENTS(DOC_MODEL_ID);

/*REFERENCES*/
ALTER TABLE DOCUMENTS
ADD CONSTRAINT fk_DOC_EMO_ref
    FOREIGN KEY (DOC_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID);
    
/*GENERATOR*/
CREATE GENERATOR GEN_DOC_ID;
SET GENERATOR GEN_DOC_ID TO 0;

/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_DOC_ID  FOR DOCUMENTS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.DOC_ID IS NULL)
        then new.DOC_ID = GEN_ID(GEN_DOC_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_DOC_LOG  FOR DOCUMENTS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SEVERITY_LEVEL
 * Prefix:		SLE
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SEVERITY_LEVEL (
  SLE_ID			VARCHAR(2)	NOT NULL PRIMARY KEY,
  SLE_DESCRIPTION	VARCHAR(45) NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SLE_INDEX1_idx ON SEVERITY_LEVEL(SLE_DESCRIPTION);


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SLE_LOG  FOR SEVERITY_LEVEL ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,USR_INSERT)VALUES('0','-'			,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,USR_INSERT)VALUES('1','NORMAL'	,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,USR_INSERT)VALUES('2','LEVE'		,'SYSTEM');
INSERT INTO SEVERITY_LEVEL(SLE_ID,SLE_DESCRIPTION,USR_INSERT)VALUES('3','GRAVE'		,'SYSTEM');

/******* END OF TABLE CONFIG *******//* Table:		ALARMS_GROUP
 * Prefix:		AGR
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_GROUP (
  AGR_ID INT NOT NULL PRIMARY KEY,
  AGR_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP);
COMMIT;


/*INDEXES*/
CREATE INDEX ix_AGR_INDEX1_idx ON ALARMS_GROUP(AGR_DESCRIPTION);
  
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_AGR_ID;
SET GENERATOR GEN_AGR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_AGR_ID  FOR ALARMS_GROUP ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.AGR_ID IS NULL)
        then new.AGR_ID = GEN_ID(GEN_AGR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_AGR_LOG  FOR ALARMS_GROUP ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS_TYPE
 * Prefix:		ATY
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_TYPE (
  ATY_ID			INT			NOT NULL PRIMARY KEY,
  ATY_DESCRIPTION	VARCHAR(45) NOT NULL,
  ATY_CLASS			CHAR(1)		NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_ATY_INDEX1_idx ON ALARMS_TYPE(ATY_DESCRIPTION);
  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_ATY_ID;
SET GENERATOR GEN_ATY_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_ATY_ID  FOR ALARMS_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.ATY_ID IS NULL)
        then new.ATY_ID = GEN_ID(GEN_ATY_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ATY_LOG  FOR ALARMS_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS
 * Prefix:		ALM
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE ALARMS (
  ALM_ID			VARCHAR(40) NOT NULL PRIMARY KEY
  ,ALM_DESCRIPTION	VARCHAR(100) NOT NULL
  ,ALM_NORM_ID		VARCHAR(40)
  ,ALM_NORM_MAN		CHAR(1)		NOT NULL
  ,ALM_NORM_ALM		CHAR(1)		NOT NULL
  ,ALM_GROUP_ID		INT			NOT NULL
  ,ALM_TYPE_ID		INT			NOT NULL
  ,ALM_MODEL_ID		INT			NOT NULL
  ,ALM_SEVERITY_ID	VARCHAR(2)	NOT NULL
  ,USR_INSERT		VARCHAR(45) NOT NULL
  ,DTI_INSERT		TIMESTAMP	NOT NULL
  ,USR_UPDATE		VARCHAR(45) 
  ,DTI_UPDATE		TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_ALM_AGR_idx ON ALARMS(ALM_GROUP_ID);
CREATE INDEX fk_ALM_ATY_idx ON ALARMS(ALM_TYPE_ID);
CREATE INDEX ix_ALM_INDEX1_idx ON ALARMS(ALM_DESCRIPTION);
CREATE INDEX fk_ALM_EMO_idx ON ALARMS(ALM_MODEL_ID);
CREATE INDEX fk_ALM_ALM_idx ON ALARMS(ALM_NORM_ID);
CREATE INDEX fk_ALM_SLE_idx ON ALARMS(ALM_SEVERITY_ID);

/*REFERENCES*/
ALTER TABLE ALARMS
ADD CONSTRAINT fk_ALM_AGR_ref
    FOREIGN KEY (ALM_GROUP_ID)
    REFERENCES ALARMS_GROUP (AGR_ID),
    
ADD CONSTRAINT fk_ALM_ATY_ref
    FOREIGN KEY (ALM_TYPE_ID)
    REFERENCES ALARMS_TYPE (ATY_ID),
    
ADD CONSTRAINT fk_ALM_EMO_ref
    FOREIGN KEY (ALM_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID),
    
ADD CONSTRAINT fk_ALM_ALM_ref
    FOREIGN KEY (ALM_NORM_ID)
    REFERENCES ALARMS (ALM_ID),
    
ADD CONSTRAINT fk_ALM_SLE_ref
    FOREIGN KEY (ALM_SEVERITY_ID)
    REFERENCES SEVERITY_LEVEL (SLE_ID);

  
/*GENERATOR*/

/*TRIGGER ID*/

    
/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_ALM_LOG  FOR ALARMS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EQUIPMENTS_OID
 * Prefix:		EOI
 * Date:		30/11/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE EQUIPMENTS_OID (
  EOI_ID			INT 		NOT NULL PRIMARY KEY,
  EOI_MODEL_ID		INT,
  EOI_OID			VARCHAR(45),
  EOI_ALARM_ID		VARCHAR(20),
  USR_INSERT		VARCHAR(45)	NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_EOI_EMO_idx ON EQUIPMENTS_OID(EOI_MODEL_ID);
CREATE INDEX fk_EOI_ALM_idx ON EQUIPMENTS_OID(EOI_ALARM_ID);

/*REFERENCES*/
ALTER TABLE EQUIPMENTS_OID
ADD CONSTRAINT fk_EOI_EMO_ref
    FOREIGN KEY (EOI_MODEL_ID)
    REFERENCES EQUIPMENTS_MODEL (EMO_ID),
ADD CONSTRAINT fk_EOI_ALM_ref
    FOREIGN KEY (EOI_ALARM_ID)
    REFERENCES ALARMS (ALM_ID);

    
/*GENERATOR*/
CREATE GENERATOR GEN_EOI_ID;
SET GENERATOR GEN_EOI_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EOI_ID  FOR EQUIPMENTS_OID ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EOI_ID IS NULL)
        then new.EOI_ID = GEN_ID(GEN_EOI_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EOI_LOG  FOR EQUIPMENTS_OID ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARMS_FILTER
 * Prefix:		AFI
 * Date:		03/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE ALARMS_FILTER (
  AFI_ID			INT NOT NULL PRIMARY KEY,
  AFI_ALARM_ID		VARCHAR(40) NOT NULL,
  AFI_EQUIPMENT_ID	VARCHAR(20) NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP NOT NULL,
  USR_UPDATE		VARCHAR(45) ,
  DTI_UPDATE		TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_AFI_ALM_idx ON ALARMS_FILTER(AFI_ALARM_ID);
CREATE INDEX fk_AFI_EQU_idx ON ALARMS_FILTER(AFI_EQUIPMENT_ID);

/*REFERENCES*/
ALTER TABLE ALARMS_FILTER
ADD CONSTRAINT fk_AFI_ALM_ref
    FOREIGN KEY (AFI_ALARM_ID)
    REFERENCES ALARMS (ALM_ID),

ADD CONSTRAINT fk_AFI_EQU_ref
    FOREIGN KEY (AFI_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);
  
/*GENERATOR*/
CREATE GENERATOR GEN_AFI_ID;
SET GENERATOR GEN_AFI_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_AFI_ID  FOR ALARMS_FILTER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.AFI_ID IS NULL)
        then new.AFI_ID = GEN_ID(GEN_AFI_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_AFI_LOG  FOR ALARMS_FILTER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		EVENTS
 * Prefix:		EVE
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:		
 * */

/*TABLE*/
CREATE TABLE EVENTS (
  EVE_ID				BIGINT		NOT NULL PRIMARY KEY,
  EVE_EXT_ID			VARCHAR(20),
  EVE_EQUIPMENT_ID		VARCHAR(20),
  EVE_ALARM_ID			VARCHAR(20),
  EVE_OPER_STATE_ID		VARCHAR(20),
  EVE_DATETIME			TIMESTAMP,
  EVE_SOLV_USER			VARCHAR(45),
  EVE_SOLV_DATE			TIMESTAMP,
  EVE_RECO_USER			VARCHAR(45),
  EVE_RECO_DATE			TIMESTAMP,
  EVE_SITE				VARCHAR(45),
  EVE_MODEL				VARCHAR(45),
  USR_INSERT			VARCHAR(45) NOT NULL,
  DTI_INSERT			TIMESTAMP	NOT NULL,
  USR_UPDATE			VARCHAR(45),
  DTI_UPDATE			TIMESTAMP);
COMMIT;



/*INDEXES*/
CREATE INDEX ix_EVE_INDEX1_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID, EVE_DATETIME);
CREATE INDEX ix_EVE_INDEX2_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID, EVE_ALARM_ID);
CREATE INDEX ix_EVE_INDEX3_idx ON EVENTS(EVE_ID, EVE_EQUIPMENT_ID);
CREATE INDEX ix_EVE_INDEX4_idx ON EVENTS(EVE_EXT_ID);  
  
/*REFERENCES*/


/*GENERATOR*/
CREATE GENERATOR GEN_EVE_ID;
SET GENERATOR GEN_EVE_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_EVE_ID  FOR EVENTS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.EVE_ID IS NULL)
        then new.EVE_ID = GEN_ID(GEN_EVE_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_EVE_LOG  FOR EVENTS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_TYPE
 * Prefix:		SOT
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_TYPE (
  SOT_ID INT NOT NULL PRIMARY KEY,
  SOT_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45) ,
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOT_INDEX1_idx ON SERVICE_ORDER_TYPE(SOT_DESCRIPTION);  
/*REFERENCES*/

/*GENERATOR*/
CREATE GENERATOR GEN_SOT_ID;
SET GENERATOR GEN_SOT_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOT_ID  FOR SERVICE_ORDER_TYPE ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOT_ID IS NULL)
        then new.SOT_ID = GEN_ID(GEN_SOT_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOT_LOG  FOR SERVICE_ORDER_TYPE ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('CORRETIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('PREDITIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('PREVENTIVA','SYSTEM');
INSERT INTO SERVICE_ORDER_TYPE (SOT_DESCRIPTION,USR_INSERT) VALUES ('SUBSTIUIÇÃO','SYSTEM');

/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_STATUS
 * Prefix:		SOS
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_STATUS (
  SOS_ID			INT			NOT NULL PRIMARY KEY,
  SOS_DESCRIPTION	VARCHAR(45) NOT NULL,
  SOS_FEAT_ID		INT,
  SOS_LOG_REMARK	CHAR(1)		NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOS_INDEX1_idx ON SERVICE_ORDER_STATUS(SOS_DESCRIPTION);

/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_STATUS
ADD CONSTRAINT fk_SOS_FEAT_ref
    FOREIGN KEY (SOS_FEAT_ID)
    REFERENCES SYS_FEATURES (ID);

/*GENERATOR*/
CREATE GENERATOR GEN_SOS_ID;
SET GENERATOR GEN_SOS_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOS_ID  FOR SERVICE_ORDER_STATUS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOS_ID IS NULL)
        then new.SOS_ID = GEN_ID(GEN_SOS_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOS_LOG  FOR SERVICE_ORDER_STATUS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;



/*POPULATE TABLE*/

-- RELATED FEATURES
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Abrir'				, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Atribuir Técnico'	, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Analisar'			, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Solic. Troca Téc.'	, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Solicitar Aut.'		, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Rejeitar'			, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Reabrir'				, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Liberar Acesso'		, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Iniciar Atend.'		, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Interr. Atend.'		, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Concluir Atend.'		, null);
INSERT INTO SYS_FEATURES(DESCRIPTION,URL) VALUES ('Finalizar'			, null);

INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('NOVA'						,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Abrir')				);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('ATRIBUIDA'				,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Atribuir Técnico')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('EM ANALISE'				,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Analisar')			);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('REATRIBUIR'				,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Solic. Troca Téc.')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('REJEITADO'				,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Rejeitar')			);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('AGUARDANDO AUTORIZACAO'	,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Solicitar Aut.')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('ACESSO LIBERADO'			,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Liberar Acesso')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('EM ANDAMENTO'				,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Iniciar Atend.')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('EM ESPERA'				,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Interr. Atend.')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('CONCLUIDO'				,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Concluir Atend.')	);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('FINALIZADO'				,'SYSTEM','N',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Finalizar')			);
INSERT INTO SERVICE_ORDER_STATUS (SOS_DESCRIPTION,USR_INSERT,SOS_LOG_REMARK,SOS_FEAT_ID) VALUES ('REABERTO'					,'SYSTEM','Y',(SELECT ID FROM SYS_FEATURES WHERE DESCRIPTION = 'Reabrir')			);

/******* END OF TABLE CONFIG *******/

/* Table:		TECHNICIAN
 * Prefix:		TEC
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE TECHNICIAN (
  TEC_ID VARCHAR(6) NOT NULL PRIMARY KEY,
  TEC_NAME VARCHAR(45) NOT NULL,
  TEC_SITE_ID INT NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_TEC_SIT_idx ON TECHNICIAN(TEC_SITE_ID);
CREATE INDEX ix_TEC_INDEX1_idx ON TECHNICIAN(TEC_NAME);
  
/*REFERENCES*/
ALTER TABLE TECHNICIAN
ADD CONSTRAINT fk_TEC_SIT_ref
    FOREIGN KEY (TEC_SITE_ID)
    REFERENCES SITES (SIT_ID);

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_TEC_LOG  FOR TECHNICIAN ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER
 * Prefix:		SOR
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	SERVICE_ORDER_TYPE (SOT_ID),SERVICE_ORDER_STATUS (SOS_ID)
 * 				EVENTS (EVE_ID),SERVICE_ORDER (SOR_ID),EQUIPMENTS (EQU_ID)
 * Obs:			
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER (
   SOR_ID				INT			NOT NULL PRIMARY KEY
  ,SOR_TYPE_ID			INT			NOT NULL
  ,SOR_STATUS_ID		INT			NOT NULL
  ,SOR_EVENT_ID			BIGINT
  ,SOR_PARENT_ID		INT
  ,SOR_TECHNICIAN_ID	VARCHAR(6)
  ,SOR_DATETIME			TIMESTAMP	NOT NULL
  ,SOR_START_FORECAST	TIMESTAMP	NOT NULL
  ,SOR_START			TIMESTAMP 
  ,SOR_END_FORECAST		TIMESTAMP	NOT NULL
  ,SOR_END				TIMESTAMP 
  ,SOR_PRIORITY_ID		VARCHAR(2)	NOT NULL
  ,SOR_REMARKS			CHAR(255)
  ,SOR_EQUIPMENT_ID		VARCHAR(20) NOT NULL
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45) 
  ,DTI_UPDATE			TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOR_SOT_idx ON SERVICE_ORDER(SOR_TYPE_ID);
CREATE INDEX fk_SOR_SOS_idx ON SERVICE_ORDER(SOR_STATUS_ID);
CREATE INDEX fk_SOR_EVE_idx ON SERVICE_ORDER(SOR_EVENT_ID);
CREATE INDEX fk_SOR_SOR_idx ON SERVICE_ORDER(SOR_PARENT_ID);
CREATE INDEX fk_SOR_EQU_idx ON SERVICE_ORDER(SOR_EQUIPMENT_ID);
CREATE INDEX fk_SOR_SLE_idx ON SERVICE_ORDER(SOR_PRIORITY_ID);
CREATE INDEX fk_SOR_TEC_idx ON SERVICE_ORDER(SOR_TECHNICIAN_ID);


/*REFERENCES*/
ALTER TABLE SERVICE_ORDER
ADD CONSTRAINT fk_SOR_SOT_ref
    FOREIGN KEY (SOR_TYPE_ID)
    REFERENCES SERVICE_ORDER_TYPE (SOT_ID),

ADD CONSTRAINT fk_SOR_SOS_ref
    FOREIGN KEY (SOR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SOR_EVE_ref
    FOREIGN KEY (SOR_EVENT_ID)
    REFERENCES EVENTS (EVE_ID),

ADD CONSTRAINT fk_SOR_SOR_ref
    FOREIGN KEY (SOR_PARENT_ID)
    REFERENCES SERVICE_ORDER (SOR_ID),

ADD CONSTRAINT fk_SOR_EQU_ref
    FOREIGN KEY (SOR_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID),

ADD CONSTRAINT fk_SOR_SLE_ref
    FOREIGN KEY (SOR_PRIORITY_ID)
    REFERENCES SEVERITY_LEVEL (SLE_ID),

ADD CONSTRAINT fk_SOR_TEC_ref
    FOREIGN KEY (SOR_TECHNICIAN_ID)
    REFERENCES TECHNICIAN (TEC_ID);
    
/*GENERATOR*/
CREATE GENERATOR GEN_SOR_ID;
SET GENERATOR GEN_SOR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOR_ID  FOR SERVICE_ORDER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOR_ID IS NULL)
        then new.SOR_ID = GEN_ID(GEN_SOR_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOR_LOG  FOR SERVICE_ORDER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_JOBS
 * Prefix:		SOJ
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:			Not Incremental ID
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_JOBS (
  SOJ_ID VARCHAR(2) NOT NULL PRIMARY KEY,
  SOJ_DESCRIPTION VARCHAR(45) NOT NULL,
  USR_INSERT VARCHAR(45) NOT NULL,
  DTI_INSERT TIMESTAMP NOT NULL,
  USR_UPDATE VARCHAR(45),
  DTI_UPDATE TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX ix_SOJ_INDEX1_idx ON SERVICE_ORDER_JOBS(SOJ_DESCRIPTION);

/*REFERENCES*/

/*GENERATOR*/

/*TRIGGER ID*/

/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOJ_LOG  FOR SERVICE_ORDER_JOBS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_LOG
 * Prefix:		SOL
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_LOG (
  SOL_ID				INT			NOT NULL PRIMARY KEY,
  SOL_SERVICE_ORDER_ID	INT,
  SOL_PRE_STATUS_ID		INT,
  SOL_CUR_STATUS_ID		INT			NOT NULL,
  SOL_USER_ID			VARCHAR(45) NOT NULL,
  SOL_DATETIME			TIMESTAMP	NOT NULL,
  SOL_REMARKS			CHAR(255),
  USR_INSERT			VARCHAR(45)	NOT NULL,
  DTI_INSERT			TIMESTAMP	NOT NULL,
  USR_UPDATE			VARCHAR(45),
  DTI_UPDATE			TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOL_SOR_idx ON SERVICE_ORDER_LOG(SOL_SERVICE_ORDER_ID);
CREATE INDEX fk_SOL_SOS_A_idx ON SERVICE_ORDER_LOG(SOL_PRE_STATUS_ID);
CREATE INDEX fk_SOL_SOS_B_idx ON SERVICE_ORDER_LOG(SOL_CUR_STATUS_ID);
  
/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_LOG
ADD CONSTRAINT fk_SOL_SOR_ref
    FOREIGN KEY (SOL_SERVICE_ORDER_ID)
    REFERENCES SERVICE_ORDER (SOR_ID),
    
ADD CONSTRAINT fk_SOL_SOS_A_ref
    FOREIGN KEY (SOL_PRE_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SOL_SOS_B_ref
    FOREIGN KEY (SOL_CUR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_SOL_ID;
SET GENERATOR GEN_SOL_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOL_ID  FOR SERVICE_ORDER_LOG ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOL_ID IS NULL)
        then new.SOL_ID = GEN_ID(GEN_SOL_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOL_LOG  FOR SERVICE_ORDER_LOG ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/*
 * Variaveis:
 * STATUS_RULES:	Tabela
 * SRU:	Prefixo da Tabela
 * SRU_ID:	Campo ID da Tabela
 * */

/* Table:		STATUS_RULES
 * Prefix:		SRU
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE STATUS_RULES (
  SRU_ID			INT			NOT NULL PRIMARY KEY,
  SRU_ROLE_ID		INT			NOT NULL,
  SRU_CUR_STATUS_ID INT			NOT NULL,
  SRU_NXT_STATUS_ID INT			NOT NULL,
  USR_INSERT		VARCHAR(45) NOT NULL,
  DTI_INSERT		TIMESTAMP	NOT NULL,
  USR_UPDATE		VARCHAR(45),
  DTI_UPDATE		TIMESTAMP);
COMMIT;
  

/*INDEXES*/
CREATE INDEX fk_SRU_ROLE_idx ON STATUS_RULES(SRU_ROLE_ID);
CREATE INDEX fk_SRU_SOS_A_idx ON STATUS_RULES(SRU_CUR_STATUS_ID);
CREATE INDEX fk_SRU_SOS_B_idx ON STATUS_RULES(SRU_NXT_STATUS_ID);

/*REFERENCES*/
ALTER TABLE STATUS_RULES
ADD CONSTRAINT fk_SRU_ROLE_ref
    FOREIGN KEY (SRU_ROLE_ID)
    REFERENCES ROLE (id),

ADD CONSTRAINT fk_SRU_SOS_A_ref
    FOREIGN KEY (SRU_CUR_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID),

ADD CONSTRAINT fk_SRU_SOS_B_ref
    FOREIGN KEY (SRU_NXT_STATUS_ID)
    REFERENCES SERVICE_ORDER_STATUS (SOS_ID);
  
  
/*GENERATOR*/
CREATE GENERATOR GEN_SRU_ID;
SET GENERATOR GEN_SRU_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SRU_ID  FOR STATUS_RULES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SRU_ID IS NULL)
        then new.SRU_ID = GEN_ID(GEN_SRU_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SRU_LOG  FOR STATUS_RULES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
-- STATUS: 1
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'NOVA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 2
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 3
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';

-- STATUS: 4
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'OPERACAO%';
	
-- STATUS: 5
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 6
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ATRIBUIDA')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 7
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'AGUARDANDO AUTORIZACAO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'OPERACAO%';

-- STATUS: 8
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'AGUARDANDO AUTORIZACAO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ACESSO LIBERADO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';


-- STATUS: 9
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'ACESSO LIBERADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'OPERACAO%';

-- STATUS: 10
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';

-- STATUS: 10.1
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';

-- STATUS: 11
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ESPERA')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';

-- STATUS: 12
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANDAMENTO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';

-- STATUS: 13
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REABERTO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 14
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'CONCLUIDO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 15
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REJEITADO')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'FINALIZADO')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME = 'CCO'
	OR ROLENAME LIKE 'BASE%';

-- STATUS: 16
INSERT INTO STATUS_RULES (SRU_ROLE_ID,SRU_CUR_STATUS_ID,SRU_NXT_STATUS_ID,USR_INSERT)
SELECT
	ID
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'EM ANALISE')
	,(SELECT SOS_ID FROM SERVICE_ORDER_STATUS WHERE SOS_DESCRIPTION = 'REATRIBUIR')
	,'SYSTEM'
FROM
	ROLE
WHERE
	ROLENAME LIKE 'BASE%'
	OR ROLENAME LIKE 'OPERACAO%';



/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_OCCURRENCES
 * Prefix:		SOO
 * Date:		04/11/2014
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_OCCURRENCES (
  SOO_ID				INT			NOT NULL	PRIMARY KEY
  ,SOO_SERVICE_ORDER_ID	INT
  ,SOO_SERVICE_ID		VARCHAR(2)
  ,SOO_TECHNICIAN_ID	VARCHAR(6)
  ,SOO_START			TIMESTAMP	NOT NULL
  ,SOO_END				TIMESTAMP	NOT NULL
  ,SOO_REMARK			CHAR(120)
  ,USR_INSERT			VARCHAR(45)	NOT NULL
  ,DTI_INSERT			TIMESTAMP	NOT NULL
  ,USR_UPDATE			VARCHAR(45) 
  ,DTI_UPDATE			TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOO_TEC_idx ON SERVICE_ORDER_OCCURRENCES(SOO_TECHNICIAN_ID);
CREATE INDEX fk_SOO_SOJ_idx ON SERVICE_ORDER_OCCURRENCES(SOO_SERVICE_ID);
CREATE INDEX fk_SOO_SOR_idx ON SERVICE_ORDER_OCCURRENCES(SOO_SERVICE_ORDER_ID);

  
/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_OCCURRENCES
ADD CONSTRAINT fk_SOO_SOJ_ref
    FOREIGN KEY (SOO_SERVICE_ID)
    REFERENCES SERVICE_ORDER_JOBS (SOJ_ID),

ADD CONSTRAINT fk_SOO_TEC_ref
    FOREIGN KEY (SOO_TECHNICIAN_ID)
    REFERENCES TECHNICIAN (TEC_ID),

ADD CONSTRAINT fk_SOO_SOR_ref
    FOREIGN KEY (SOO_SERVICE_ORDER_ID)
    REFERENCES SERVICE_ORDER (SOR_ID);

/*GENERATOR*/
CREATE GENERATOR GEN_SOO_ID;
SET GENERATOR GEN_SOO_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOO_ID  FOR SERVICE_ORDER_OCCURRENCES ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOO_ID IS NULL)
        then new.SOO_ID = GEN_ID(GEN_SOO_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOO_LOG  FOR SERVICE_ORDER_OCCURRENCES ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		SERVICE_ORDER_FORECAST
 * Prefix:		SOF
 * Date:		03/03/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE SERVICE_ORDER_FORECAST(
	SOF_ID				INT			NOT NULL PRIMARY KEY,
	SOF_SEVERITY_ID		VARCHAR(2)	NOT NULL,
	SOF_SUB_SYSTEM_ID	VARCHAR(10) NOT NULL,
	SOF_START_FORECAST	INT			NOT NULL,
	SOF_END_FORECAST	INT			NOT NULL,
	USR_INSERT			VARCHAR(45) NOT NULL,
	DTI_INSERT			TIMESTAMP	NOT NULL,
	USR_UPDATE			VARCHAR(45),
	DTI_UPDATE			TIMESTAMP);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_SOF_SLE_idx ON SERVICE_ORDER_FORECAST(SOF_SEVERITY_ID);
CREATE INDEX fk_SOF_SSY_idx ON SERVICE_ORDER_FORECAST(SOF_SUB_SYSTEM_ID);
  
/*REFERENCES*/
ALTER TABLE SERVICE_ORDER_FORECAST
ADD CONSTRAINT fk_SOF_SLE_ref
    FOREIGN KEY (SOF_SEVERITY_ID)
    REFERENCES SEVERITY_LEVEL (SLE_ID),
    
ADD CONSTRAINT fk_SOF_SSY_ref
    FOREIGN KEY (SOF_SUB_SYSTEM_ID)
    REFERENCES SUB_SYSTEM (SSY_ID);
  
/*GENERATOR*/
CREATE GENERATOR GEN_SOF_ID;
SET GENERATOR GEN_SOF_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOF_ID  FOR SERVICE_ORDER_FORECAST ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.SOF_ID IS NULL)
        then new.SOF_ID = GEN_ID(GEN_SOF_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_SOF_LOG  FOR SERVICE_ORDER_FORECAST ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/
/* Table:		TASK_MONITOR_HEADER
 * Prefix:		TMH
 * Date:		09/06/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE TASK_MONITOR_HEADER (
  TMH_ID		INT			NOT NULL PRIMARY KEY,
  TMH_DESC		VARCHAR(45)	NOT NULL,
  TMH_ACTIVE	CHAR(1)		NOT NULL,
  TMH_ALARM_ID	VARCHAR(40)	NOT NULL,
  USR_INSERT	VARCHAR(45)	NOT NULL,
  DTI_INSERT	TIMESTAMP	NOT NULL,
  USR_UPDATE	VARCHAR(45),
  DTI_UPDATE	TIMESTAMP
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_TMH_ALM_idx ON  TASK_MONITOR_HEADER(TMH_ALARM_ID);
  
/*REFERENCES*/
ALTER TABLE TASK_MONITOR_HEADER
ADD CONSTRAINT fk_TMH_ALM_ref
    FOREIGN KEY (TMH_ALARM_ID)
    REFERENCES ALARMS (ALM_ID);


/*GENERATOR*/
CREATE GENERATOR GEN_TMH_ID;
SET GENERATOR GEN_TMH_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_TMH_ID  FOR TASK_MONITOR_HEADER ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.TMH_ID IS NULL)
        then new.TMH_ID = GEN_ID(GEN_TMH_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_TMH_LOG  FOR TASK_MONITOR_HEADER ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*** N:M RELATIONSHIP ***/
CREATE TABLE TASK_EQUIPMENT (
  TASK_ID		INT			NOT NULL,
  EQUIPMENT_ID	VARCHAR(20) NOT NULL,
  CUTOFF_DATE	TIMESTAMP,
  PRIMARY KEY (TASK_ID, EQUIPMENT_ID)
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_EQU_idx ON TASK_EQUIPMENT(EQUIPMENT_ID);
CREATE INDEX fk_THM_idx ON TASK_EQUIPMENT(TASK_ID);

/*REFERENCES*/
ALTER TABLE TASK_EQUIPMENT
ADD CONSTRAINT fk_THM_ref
    FOREIGN KEY (TASK_ID)
    REFERENCES TASK_MONITOR_HEADER (TMH_ID),
    
ADD CONSTRAINT fk_EQU_ref
    FOREIGN KEY (EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);
COMMIT;

/******* END OF TABLE CONFIG *******/

/* Table:		TASK_MONITOR_ITEMS
 * Prefix:		TMI
 * Date:		09/06/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE TASK_MONITOR_ITEMS (
	TMI_ID				INT			NOT NULL PRIMARY KEY,
	TMI_TASK_ID			INT			,
	TMI_SEQ				VARCHAR(02)	NOT NULL,
	TMI_LOGIC_OP		VARCHAR(03)	NOT NULL,
	TMI_TYPE			VARCHAR(02)	NOT NULL,
	TMI_FIELD			VARCHAR(45)	NOT NULL,
	TMI_RELATIONAL_OP	VARCHAR(02)	NOT NULL,
	TMI_VALUE			INT			NOT NULL,
	USR_INSERT			VARCHAR(45)	NOT NULL,
	DTI_INSERT			TIMESTAMP	NOT NULL,
	USR_UPDATE			VARCHAR(45),
	DTI_UPDATE			TIMESTAMP
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_TMI_TMH_idx ON TASK_MONITOR_ITEMS(TMI_TASK_ID);
  
/*REFERENCES*/
ALTER TABLE TASK_MONITOR_ITEMS
ADD CONSTRAINT fk_TMI_TMH_ref
    FOREIGN KEY (TMI_TASK_ID)
    REFERENCES TASK_MONITOR_HEADER (TMH_ID);


/*GENERATOR*/
CREATE GENERATOR GEN_TMI_ID;
SET GENERATOR GEN_TMI_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_TMI_ID  FOR TASK_MONITOR_ITEMS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.TMI_ID IS NULL)
        then new.TMI_ID = GEN_ID(GEN_TMI_ID,1);
END^
SET TERM ; ^
COMMIT;


/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_TMI_LOG  FOR TASK_MONITOR_ITEMS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;


/******* END OF TABLE CONFIG *******/

/* Table:		ALARM_COUNTER
 * Prefix:		ACO
 * Date:		17/06/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*
CREATE TABLE ALARM_COUNTER (
  ACO_ALARM_ID		VARCHAR(20)	NOT NULL,
  ACO_EQUIPMENT_ID	VARCHAR(20)	NOT NULL,
  ACO_COUNTER		INT			DEFAULT 0,
  ACO_LAST_RESET	TIMESTAMP,
  PRIMARY KEY (ACO_ALARM_ID, ACO_EQUIPMENT_ID)
);
COMMIT;

CREATE INDEX fk_ACO_EQU_idx ON ALARM_COUNTER(ACO_EQUIPMENT_ID);
CREATE INDEX fk_ACO_ALM_idx ON ALARM_COUNTER(ACO_ALARM_ID);

ALTER TABLE ALARM_COUNTER
ADD CONSTRAINT fk_ACO_ALM_ref
    FOREIGN KEY (ACO_ALARM_ID)
    REFERENCES ALARMS (ALM_ID),
ADD CONSTRAINT fk_ACO_EQU_ref
    FOREIGN KEY (ACO_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);

COMMIT;
*/
/******* END OF TABLE CONFIG *******/

/* Table:		TASK_MONITOR_EQUIPMENTS
 * Prefix:		TME
 * Date:		09/11/2015
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */


/*TABLE*/
CREATE TABLE TASK_MONITOR_EQUIPMENTS (
  TME_ID			INT			NOT NULL PRIMARY KEY,
  TME_TASK_ID		INT,
  TME_EQUIPMENT_ID	VARCHAR(20),
  TME_CUTOFF_DATE	TIMESTAMP
);
COMMIT;

/*INDEXES*/
CREATE INDEX fk_TME_EQU_idx ON TASK_MONITOR_EQUIPMENTS(TME_EQUIPMENT_ID);
CREATE INDEX fk_TME_THM_idx ON TASK_MONITOR_EQUIPMENTS(TME_TASK_ID);


/*REFERENCES*/
ALTER TABLE TASK_MONITOR_EQUIPMENTS
ADD CONSTRAINT fk_TME_THM_ref
    FOREIGN KEY (TME_TASK_ID)
    REFERENCES TASK_MONITOR_HEADER (TMH_ID),
    
ADD CONSTRAINT fk_TME_EQU_ref
    FOREIGN KEY (TME_EQUIPMENT_ID)
    REFERENCES EQUIPMENTS (EQU_ID);


/*GENERATOR*/
CREATE GENERATOR GEN_TME_ID;
SET GENERATOR GEN_TME_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_TME_ID  FOR TASK_MONITOR_EQUIPMENTS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.TME_ID IS NULL)
        then new.TME_ID = GEN_ID(GEN_TME_ID,1);
END^
SET TERM ; ^
COMMIT;

/******* END OF TABLE CONFIG *******/

/* Table:		PARAMETERS
 * Prefix:		PAR
 * Date:		31/10/2014       
 * Author:		Joabe Lucena
 * References:	none
 * Obs:
 * */

/*TABLE*/
CREATE TABLE PARAMETERS (
  PAR_ID		INT			 NOT NULL PRIMARY KEY
  ,PAR_NAME		VARCHAR(15)  NOT NULL
  ,PAR_TYPE		VARCHAR(45)  NOT NULL
  ,PAR_VALUE	VARCHAR(200)  NOT NULL
  ,PAR_DESC		VARCHAR(255) NOT NULL
  ,USR_INSERT	VARCHAR(45)  NOT NULL
  ,DTI_INSERT	TIMESTAMP    NOT NULL
  ,USR_UPDATE	VARCHAR(45)
  ,DTI_UPDATE	TIMESTAMP);
COMMIT;


/*INDEXES*/
CREATE INDEX ix_PAR_INDEX1_idx ON PARAMETERS(PAR_NAME,PAR_TYPE,PAR_DESC);
CREATE INDEX ix_PAR_INDEX2_idx ON PARAMETERS(PAR_NAME,PAR_TYPE,PAR_VALUE);  


/*GENERATOR*/
CREATE GENERATOR GEN_PAR_ID;
SET GENERATOR GEN_PAR_ID TO 0;


/*TRIGGER ID*/
SET TERM ^ ;
CREATE TRIGGER TRG_PAR_ID  FOR PARAMETERS ACTIVE
BEFORE INSERT
AS
BEGIN
	if(new.PAR_ID IS NULL)
        then new.PAR_ID = GEN_ID(GEN_PAR_ID,1);
END^
SET TERM ; ^
COMMIT;



/*TRIGGER LOG*/
SET TERM ^ ;
CREATE TRIGGER TRG_PAR_LOG  FOR PARAMETERS ACTIVE
BEFORE INSERT OR UPDATE
AS
BEGIN
	if(inserting)
        then new.DTI_INSERT = CURRENT_TIMESTAMP;
    if(updating)
        then new.DTI_UPDATE = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
COMMIT;

/*POPULATE TABLE*/
-- SYSTEM TECHNICAL PARAMETERS LIKE IP ADDRESSES, PORT NUMBERS, ETC. STARTS WITH: SYS
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_IPSNMP'	,'C','10.27.0.1'														,'IP DO SERVIDOR SNMP DO SAM'																				,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_PORTSNMP'	,'C','162'																,'PORTA DO SERVIDOR SNMP DO SAM'																			,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_SPGUSER'	,'C','biuser'															,'USUARIO DO SPAGO'																							,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_SPGPASS'	,'C','biuser'															,'SENHA DE ACESSO AO SPAGO'																					,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_SPGROLE'	,'C','spagobi/user'														,'PERFIL PARA ACESSO AO SPAGO'																				,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_SPGEND'	,'C','http://10.27.0.1:8180/SpagoBI/sdk/DocumentsService'				,'PERFIL PARA ACESSO AO SPAGO'																				,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_SPGURL'	,'C','http://10.27.0.1:8180/SpagoBI/'									,'URL DE ACESSO AO SPAGO'																					,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_MAILHOST'	,'C','smtp.ttrans.com.br'												,'ENDERECO SERVIDOR SMTP SAM'																				,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_MAILPORT'	,'C','587'																,'PORTA SERVIDOR SMTP SAM'																					,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_MAILUSER'	,'C','mail@mail.com.br'													,'ENDEREÇO DE EMAIL'																						,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_MAILPASS'	,'C','Senha1234'														,'SENHA PARA AUTENTICAÇÃO DO EMAIL'																			,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SYS_WSDLMSYS'	,'C','http://<host>:8080/SAM/services/Maestro/SystemServices?wsdl'		,'LOCALIZACAO DO WSDL DO SYSTEM SERVICES (MAESTRO) THALES. MANTER O PADRÃO <host> PARA O IP DE ORIGEM.'		,'SYSTEM');

-- SYSTEM FUNCTIONALITY OR CUSTOM USERS SETTINGS LIKE FIRST SERVICE ORDER STATUS. STARTS WITH: SAM
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SAM_SOINISTS'		,'C', 'NOVA'			,'STATUS INICIAL DA OS'												,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SAM_SOFINSTS'		,'C', 'FINALIZADO'		,'STATUS FINAL DA OS'												,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SAM_SOCORRET'		,'N', 1					,'CÓDIGO DO TIPO DE OS CORRETIVA'									,'SYSTEM');
INSERT INTO PARAMETERS (PAR_NAME,PAR_TYPE,PAR_VALUE,PAR_DESC,USR_INSERT) VALUES ('SAM_MESMTBF'		,'N', 3					,'QUANTIDADE DE MESES PARA CONSIDERAR NO CÁLCULO DE INDICADORES'	,'SYSTEM');
COMMIT;

/******* END OF TABLE CONFIG *******/

